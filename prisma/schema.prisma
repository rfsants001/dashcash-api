// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum BankAccountType {
  CHECKING
  INVESTIMENT
  CASH

  @@map("bank_account_type")
}

enum TransactionType {
  INCOME
  EXPENSE

  @@map("transaction_type")
}

model User {
  id           String        @id @default(uuid()) @db.Uuid()
  name         String
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bankAccounts BankAccount[]
  transactions Transaction[]
  categories   Category[]

  @@map("users")
}

model BankAccount {
  id             String          @id @default(uuid()) @db.Uuid()
  userId         String          @map("user_id") @db.Uuid
  name           String
  initialBalance Float           @map("initial_balance")
  type           BankAccountType
  color          String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("bank_accounts")
}

model Transaction {
  id            String          @id @default(uuid()) @db.Uuid()
  userId        String          @map("user_id") @db.Uuid()
  bankAccountId String          @map("bank_account_id") @db.Uuid()
  categoryId    String?         @map("category_id") @db.Uuid()
  description   String
  value         Float
  date          DateTime
  type          TransactionType
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  category    Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model Category {
  id        String          @id @default(uuid()) @db.Uuid()
  userId    String          @map("user_id") @db.Uuid()
  name      String
  icon      String
  type      TransactionType
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction Transaction[]

  @@map("categories")
}
